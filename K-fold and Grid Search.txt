import pandas as pd
import matplotlib.pyplot as plt
import numpy as mp



dataset = pd.read_csv('Social_Network_Ads.csv')
X = dataset.iloc[:,2:4].values
y = dataset.iloc[:,4].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

"""Feature scalling is required to bring all the values in the same scale so that there is no domination by any high value"""
#feature scaling is also required when we are using algorithms which use distance to classify the result
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

#Fitting the SVM regression to the training set
#Here kernal is selected as linear beacause thers are just 2 features in dataset.
# You can use kernal as 'rbf' which is a gaussian kernal if there are more than 2 features also the accuracy increase when we use kernal = 'rbf'
from sklearn.svm import SVC
classifier = SVC(kernel='rbf', random_state=0)
classifier.fit(X_train,y_train)

#Predecting the test result
y_pred = classifier.predict(X_test)

#Making the confusion matrix
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

#Applying K-fold cross validation #it is used to find the correct accuracy of the model
from sklearn.model_selection import cross_val_score
accuracy = cross_val_score(estimator=classifier,X=X_train,y=y_train,cv =10)
accuracy.mean()
accuracy.std()

# Grid search is used to find the parameters so that we can get increase the accuracy of the model
#Grid search to find the best model and the best parameters


from sklearn.model_selection import GridSearchCV
parameters = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']},
              {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,1]}]


grid_search = GridSearchCV(estimator = classifier,
                           param_grid = parameters,
                           scoring = 'accuracy',
                           cv = 10
                           )
grid_search = grid_search.fit(X_train, y_train)
best_accuracy = grid_search.best_score_
best_parameters = grid_search.best_params_
